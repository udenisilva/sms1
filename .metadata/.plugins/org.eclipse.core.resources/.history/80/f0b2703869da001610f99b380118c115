package com.lk.std.controller;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.lk.std.constant.ApplicationConstants;
import com.lk.std.constant.OLSIMSEnumConstant.Action;
import com.lk.std.dto.AttendanceDto;
import com.lk.std.dto.MarksDto;
import com.lk.std.model.Attendance;
import com.lk.std.model.Branch;
import com.lk.std.model.Grade;
import com.lk.std.model.Marks;
import com.lk.std.model.Student;
import com.lk.std.model.Subject;
import com.lk.std.service.BranchService;
import com.lk.std.service.GradeService;
import com.lk.std.service.MarksService;
import com.lk.std.service.StudentService;
import com.lk.std.service.SubjectService;

@Controller
@RequestMapping
public class ResultsController {

	@Autowired
	StudentService studentService;

	@Autowired
	MarksService marksService;

	@Autowired
	GradeService gradeService;

	@Autowired
	BranchService branchService;

	@Autowired
	SubjectService subjectService;

	@RequestMapping(value = "/results", method = RequestMethod.GET)
	public ModelAndView getHomePage(HttpServletRequest request) {
		ModelMap modelMap = new ModelMap();

		long gradeId = 0;
		long branchId = 0;
		long subject = 0;
		List<Grade> grades = null;
		List<Student> students = null;
		List<Marks> marks = null;
		List<Subject> subjectList = null;
		Grade grade=null;
		modelMap.addAttribute("branchs", branchService.findAll());
		try {
			if (!StringUtils.isBlank(request.getParameter("branchId"))) {
				branchId = Long.parseLong(request.getParameter("branchId").trim());
			}
			if (branchId > 0) {
				Branch branch = branchService.findById(branchId);
				grades = gradeService.findByBranch(branch);
				modelMap.addAttribute("branchId", branchId);
				System.out.println("grade " + grades.size() + " " + grades.get(0).getId());
			} else {
				grades = new ArrayList<>();
			}
		} catch (Exception e) {
		}

		try {
			if (!StringUtils.isBlank(request.getParameter("gradeId"))) {
				gradeId = Long.parseLong(request.getParameter("gradeId").trim());
			}
			if (gradeId > 0) {
				 grade = gradeService.findById(gradeId);
				students = studentService.findByGrade(grade);
				modelMap.addAttribute("gradeId", gradeId);
				System.out.println(students.size()+" hsdvjfjshdfjsdf");
				System.out.println("student " + students.get(0).getName());

				// DateFormat df = new SimpleDateFormat("yyyy-MM-dd");

				// if (!StringUtils.isBlank(request.getParameter("subject"))) {
				// Date bDate;
				// bDate = df.parse(request.getParameter("date"));
				// String newDateString = df.format(bDate);
				// System.out.println(newDateString);
				// subject =
				// Long.parseLong(request.getParameter("subject").trim());

				// Subject sub = subjectService.findById(subject);

				subjectList = subjectService.findByGrade(grade);
				int count = 0;
				// for (Student student : students) {
				// for (Attendance att : attendance) {
				// if(student.getId()==att.getStudent().getId());
				// }
				// }
				System.out.println(subjectList.size()+" subjectssssss");

				modelMap.addAttribute("subjects", subjectList);

				// }

			} else {
				subjectList = new ArrayList<>();
//				marks = new ArrayList<>();
				students = new ArrayList<>();
			}
		} catch (Exception e) {
		}

		try {
			if (!StringUtils.isBlank(request.getParameter("subject"))) {
				// Date bDate;
				// bDate = df.parse(request.getParameter("date"));
				// String newDateString = df.format(bDate);
				// System.out.println(newDateString);
				subject = Long.parseLong(request.getParameter("subject").trim());

				Subject sub = subjectService.findById(subject);

				marks = marksService.findByGradeAndSubject(grade, sub);
//				int count = 0;
				// for (Student student : students) {
				// for (Attendance att : attendance) {
				// if(student.getId()==att.getStudent().getId());
				// }
				// }
				modelMap.addAttribute("subjectId", subject);
				modelMap.addAttribute("marks", marks);

			} else {
				marks = new ArrayList<>();
				
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		
		try {
			if (!StringUtils.isBlank(request.getParameter("year"))) {  

//				Subject sub = subjectService.findById(subject);

				marks = marksService.findByGradeAndSubjectAnd(grade, sub);
				modelMap.addAttribute("subjectId", subject);
				modelMap.addAttribute("marks", marks);

			} else {
				marks = new ArrayList<>();
				
			}
		} catch (Exception e) {
			// TODO: handle exception
		}

//		modelMap.addAttribute("counts", 0);
		modelMap.addAttribute("grades", grades);
		modelMap.addAttribute("students", students);
		return new ModelAndView("results", modelMap);
	}

	@RequestMapping(value = "/setResults", method = RequestMethod.POST)
	public String StaffPager(HttpServletRequest request, @ModelAttribute("marksDto") MarksDto marksDto,
			BindingResult errors) {
		if (errors.hasErrors()) {
			System.out.println("------------error occured");
		}
		// Staff staff2=null;
		Action action = null;

		DateFormat df = new SimpleDateFormat("yyyy-MM-dd");

		// if (!StringUtils.isBlank(request.getParameter("date"))) {
		// try {
		// Date startDate;
		// startDate = df.parse(request.getParameter("date"));
		// String newDateString = df.format(startDate);
		// System.out.println(newDateString);
		// MarksDto.setDate(startDate);
		// } catch (Exception e) {
		// e.printStackTrace();
		// }
		// }

		try {
			if (!StringUtils.isBlank(request.getParameter("staff_id"))) {
				// staff2=staffService.findById(staff.getId());
				action = Action.USER_UPDATED;
			} else {
				// staff2=new Staff();
				action = Action.USER_CREATED;
			}

		} catch (Exception e) {
			System.out.println("------------ Exception occured");
		}

		List<Marks> marks = marksService.findByGradeAndSubject(marksDto.getGrade(), marksDto.getSubject());

		for (Marks mark : marks) {
			marksService.delete(mark);
		}

		for (Marks mark : marksDto.getMarks()) {
			 System.out.println(mark.getSubject()+ " date");
			mark.setSubject(marksDto.getSubject());
			mark.setGrade(marksDto.getGrade());
			mark.setAcademicyear(marksDto.getAcademicyear());
			mark.setExaminationType(marksDto.getExaminationType());
			marksService.save(mark);
		}

		// if (saveStaff != null) {
		// // set action logger
		// actionloggerService.setActionLogger(action, "created by" +
		// Session.getLoggedUserId(), saveStaff.getId(),
		// Session.getLoggedUserId());
		// return "redirect:staffprofile.htm?staffId=" + saveStaff.getId() + "&"
		// + ApplicationConstants.MESSAGE + "="
		// + ApplicationConstants.SUCCESS;
		// } else {
//		return "redirect:studentattendance.htm?" + ApplicationConstants.MESSAGE + "=" + ApplicationConstants.ERROR;
		// }
		
		return null;
	}

}
