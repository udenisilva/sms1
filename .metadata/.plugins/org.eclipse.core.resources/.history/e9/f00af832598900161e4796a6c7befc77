package lk.nbro.lsmis.controller;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import lk.nbro.lsmis.constant.ApplicationConstants;
import lk.nbro.lsmis.constant.GeneralEnumConstants;
import lk.nbro.lsmis.constant.OLSIMSEnumConstant;
import lk.nbro.lsmis.model.ApplicationReview;
import lk.nbro.lsmis.model.BaseApplication;
import lk.nbro.lsmis.model.SystemUser;
import lk.nbro.lsmis.service.ActionLoggerService;
import lk.nbro.lsmis.service.ApplicationReviewService;
import lk.nbro.lsmis.service.BaseApplicationService;
import lk.nbro.lsmis.service.SystemUserService;
import lk.nbro.lsmis.util.DateUtil;
import lk.nbro.lsmis.util.Session;

@Controller
public class HomeController { 

  @Autowired
  SystemUserService systemUserService;
 

  @Autowired
  ActionLoggerService actionLoggerService;


  @RequestMapping(value = "/home", method = RequestMethod.GET)
  public ModelAndView getHomePage(HttpServletRequest request) {
    ModelMap modelMap = new ModelMap();
    Session.setApplicationRefNo("");
 
    return new ModelAndView("home", modelMap);
  }


  @RequestMapping(value = "/applicationHome", method = RequestMethod.GET)
  public ModelAndView getApplicationHomePage(HttpServletRequest request) {
    Session.setApplicationRefNo("");
//    Session.setApplicationLanguage("en");
    ModelMap modelMap = new ModelMap();
    modelMap.put("message", "Hi");

    return new ModelAndView("applicationHome", modelMap);
  }


  @RequestMapping(value = "/applicationReview", method = RequestMethod.GET)
  public ModelAndView getApplicationReviewPage(HttpServletRequest request) {
    ModelMap modelMap = new ModelMap();
    long appId = 0;

    if (StringUtils.isBlank(request.getParameter("id"))) {
      modelMap.put("appIdStatus", GeneralEnumConstants.YesNoStatus.NO.toString());
      return new ModelAndView(ApplicationConstants.ERROR_COMMON_NOT_VALID_PAGE, modelMap);

    } else {
      appId = Long.parseLong(request.getParameter("id"));
      BaseApplication baseApplication = baseApplicationService.findById(appId);
      long userID = Session.getLoggedUserId();
      SystemUser loggedInUser =
          systemUserService.findByUserIdAndAllowDistrictsIn(userID, baseApplication.getDistricts());
      if (loggedInUser == null) {
        return new ModelAndView(ApplicationConstants.ERROR_COMMON_DATA_RESTRICTIONS, modelMap);
      }
      List<ApplicationReview> applicationReviews = applicationReviewService.findApplicationReviewByApplicationId(appId);
      modelMap.put("applicationReviews", applicationReviews);

      List<SystemUser> users = systemUserService.findAllSystemUsers();
      modelMap.put("users", users);
    }

    ApplicationReview applicationReview = new ApplicationReview();

    modelMap.put("reviewStatus", GeneralEnumConstants.ApplicationReviewStatus.getApplicationReviewStatusMap());
    modelMap.put("applicationReview", applicationReview);

    return new ModelAndView("applicationReview", modelMap);
  }


  @RequestMapping(value = "/applicationReview", method = RequestMethod.POST)
  public String postApplicationReviewPage(HttpServletRequest request) {
    long appId = 0;

    if (!StringUtils.isBlank(request.getParameter("id"))) {
      appId = Long.parseLong(request.getParameter("id"));
    }
    String reviewStatus = request.getParameter("reviewStatus");
    String comment = request.getParameter("reviewerComment");
    String forwardUserId = request.getParameter("forwardUser");

    ApplicationReview applicationReview = new ApplicationReview();
    applicationReview.setReviewStatus(GeneralEnumConstants.ApplicationReviewStatus.fromCode(reviewStatus));
    applicationReview.setReviewerComment(comment);
    applicationReview.setCompletedDateTime(new Date());
    SystemUser completedUser = new SystemUser();
    completedUser.setUserId(Session.getLoggedUserId());
    applicationReview.setCompletedUser(completedUser);
    SystemUser forwardUser = new SystemUser();
    forwardUser.setUserId(Long.parseLong(forwardUserId));
    applicationReview.setForwardUser(forwardUser);
    applicationReview.setIsForward(1);
    applicationReview.setCreatedDateTime(new Date());
    applicationReview.setCreatedUser(Session.getLoggedUserId());

    BaseApplication baseApplication = baseApplicationService.findById(appId);


    baseApplication.setId(appId);
    applicationReview.setBaseApplication(baseApplication);

    if (baseApplication != null) {
      List<ApplicationReview> applicationReviewList = baseApplication.getApplicationReviews();
      for (int i = 0; i < applicationReviewList.size(); i++) {
        ApplicationReview singleReview = applicationReviewList.get(i);
        singleReview.setIsForward(0);
        // applicationReviewRepository.save(singleReview);
      }
      applicationReviewList.add(applicationReview);
      System.out.println("---before save---");
      BaseApplication application = baseApplicationService.save(baseApplication);

      if (application != null) {
        // set action logger
        actionLoggerService.setActionLogger(OLSIMSEnumConstant.Action.OFFICEUSE_FORM_FILLED, appId,
            Session.getLoggedUserId());

        return "redirect:applicationReview.htm?id=" + appId + "&" + ApplicationConstants.MESSAGE + "="
            + ApplicationConstants.SUCCESS;
      } else {
        return "redirect:applicationReview.htm?id=" + appId + "&" + ApplicationConstants.MESSAGE + "="
            + ApplicationConstants.ERROR;
      }

    } else {
      return "redirect:applicationReview.htm?" + ApplicationConstants.MESSAGE + "=" + ApplicationConstants.ERROR;
    }

  }


  @RequestMapping(value = "/officeUseOnly", method = RequestMethod.GET)
  public ModelAndView getOfficeUseOnlyPage(HttpServletRequest request) {
    ModelMap modelMap = new ModelMap();
    long appId = 0;

    if (StringUtils.isBlank(request.getParameter("id"))) {
      modelMap.put("appIdStatus", GeneralEnumConstants.YesNoStatus.NO.toString());
      return new ModelAndView(ApplicationConstants.ERROR_COMMON_NOT_VALID_PAGE, modelMap);

    } else {
      appId = Long.parseLong(request.getParameter("id"));
      BaseApplication application = baseApplicationService.findById(appId);
      long userID = Session.getLoggedUserId();
      SystemUser loggedInUser = systemUserService.findByUserIdAndAllowDistrictsIn(userID, application.getDistricts());
      if (loggedInUser == null) {
        return new ModelAndView(ApplicationConstants.ERROR_COMMON_DATA_RESTRICTIONS, modelMap);
      }

      List<SystemUser> users = systemUserService.findAllSystemUsers();
      modelMap.put("application", application);
      modelMap.put("users", users);
    }

    return new ModelAndView("officeUseOnly", modelMap);
  }


  @RequestMapping(value = "/officeUseOnlylad", method = RequestMethod.POST)
  public String postOfficeUseOnlyLadPage(HttpServletRequest request) {

    long appId = 0;

    if (!StringUtils.isBlank(request.getParameter("id"))) {
      appId = Long.parseLong(request.getParameter("id"));
    }

    BigDecimal totalEstimatedAmount =
        BigDecimal.valueOf(Double.parseDouble(request.getParameter("totalEstimatedAmount")));
    long appReceivedUser = Long.parseLong(request.getParameter("applicationReceivedBy"));
    String receiptNo = request.getParameter("receiptNo");
    String paymentDate = request.getParameter("paymentDate");

    BaseApplication baseApplication = baseApplicationService.findById(appId);
    baseApplication.setTotalEstimatedAmount(totalEstimatedAmount);
    baseApplication.setApplicationReceivedBy(appReceivedUser);
    baseApplication.setReceiptNo(receiptNo);
    baseApplication.setApplicationReceivedDate(DateUtil.getDate(paymentDate));

    BaseApplication application = baseApplicationService.save(baseApplication);

    if (application != null) {
      // set action logger
      actionLoggerService.setActionLogger(OLSIMSEnumConstant.Action.OFFICEUSE_FORM_FILLED,
          GeneralEnumConstants.ApplicationType.LAD.toString(), appId, Session.getLoggedUserId());

      return "redirect:officeUseOnly.htm?id=" + appId + "&" + ApplicationConstants.MESSAGE + "="
          + ApplicationConstants.SUCCESS;
    } else {
      return "redirect:officeUseOnly.htm?id=" + appId + "&" + ApplicationConstants.MESSAGE + "="
          + ApplicationConstants.ERROR;
    }

  }

  @RequestMapping(value = "/officeUseOnlylap", method = RequestMethod.POST)
  public String postOfficeUseOnlyLapPage(HttpServletRequest request) {

    long appId = 0;

    if (!StringUtils.isBlank(request.getParameter("id"))) {
      appId = Long.parseLong(request.getParameter("id"));
    }

    BigDecimal totalEstimatedAmount =
        BigDecimal.valueOf(Double.parseDouble(request.getParameter("totalEstimatedAmount")));
    long appReceivedUser = Long.parseLong(request.getParameter("applicationReceivedBy"));
    String receiptNo = request.getParameter("receiptNo");
    String decignation = request.getParameter("designation");
    String paymentAcceptedDate = request.getParameter("payAcceptedDate");
    String applicationReceivedDate = request.getParameter("appReceivedDate");
    String reportIssuedTo = request.getParameter("appIssuedTo");

    BaseApplication baseApplication = baseApplicationService.findById(appId);
    baseApplication.setTotalEstimatedAmount(totalEstimatedAmount);
    baseApplication.setApplicationReceivedBy(appReceivedUser);
    baseApplication.setReceiptNo(receiptNo);
    baseApplication.setDesignation(decignation);
    baseApplication.setPaymentAcceptedDate(DateUtil.getDate(paymentAcceptedDate));
    baseApplication.setApplicationReceivedDate(DateUtil.getDate(applicationReceivedDate));
    baseApplication.setReportIssuedTo(reportIssuedTo);

    BaseApplication application = baseApplicationService.save(baseApplication);

    if (application != null) {
      // set action logger
      actionLoggerService.setActionLogger(OLSIMSEnumConstant.Action.OFFICEUSE_FORM_FILLED,
          GeneralEnumConstants.ApplicationType.LAP.toString(), appId, Session.getLoggedUserId());

      return "redirect:officeUseOnly.htm?id=" + appId + "&" + ApplicationConstants.MESSAGE + "="
          + ApplicationConstants.SUCCESS;
    } else {
      return "redirect:officeUseOnly.htm?id=" + appId + "&" + ApplicationConstants.MESSAGE + "="
          + ApplicationConstants.ERROR;
    }

  }

  @RequestMapping(value = "/officeUseOnlylab", method = RequestMethod.POST)
  public String postOfficeUseOnlyLabPage(HttpServletRequest request) {

    long appId = 0;

    if (!StringUtils.isBlank(request.getParameter("id"))) {
      appId = Long.parseLong(request.getParameter("id"));
    }

    long appReceivedUser = Long.parseLong(request.getParameter("applicationReceivedBy"));
    String receiptNo = request.getParameter("receiptNo");
    BigDecimal paidAmount = BigDecimal.valueOf(Double.parseDouble(request.getParameter("paidAmount")));
    String appReceivedDate = request.getParameter("appReceivedDate");

    BaseApplication baseApplication = baseApplicationService.findById(appId);
    baseApplication.setApplicationReceivedBy(appReceivedUser);
    baseApplication.setReceiptNo(receiptNo);
    baseApplication.setPaidAmount(paidAmount);
    baseApplication.setApplicationReceivedDate(DateUtil.getDate(appReceivedDate));

    BaseApplication application = baseApplicationService.save(baseApplication);

    if (application != null) {
      // set action logger
      actionLoggerService.setActionLogger(OLSIMSEnumConstant.Action.OFFICEUSE_FORM_FILLED,
          GeneralEnumConstants.ApplicationType.LAB.toString(), appId, Session.getLoggedUserId());

      return "redirect:officeUseOnly.htm?id=" + appId + "&" + ApplicationConstants.MESSAGE + "="
          + ApplicationConstants.SUCCESS;
    } else {
      return "redirect:officeUseOnly.htm?id=" + appId + "&" + ApplicationConstants.MESSAGE + "="
          + ApplicationConstants.ERROR;
    }

  }

  @RequestMapping(value = "/completeWorkFlow", method = RequestMethod.GET)
  public String completeWorkflow(HttpServletRequest request) {
    long applicationReviewId = 0;

    if (!StringUtils.isBlank(request.getParameter("id"))) {
      applicationReviewId = Long.parseLong(request.getParameter("id"));
    }
    applicationReviewService.completeApplicationReview(applicationReviewId);
    return "redirect:home.htm";
  }

}
