package com.lk.std.controller;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.lk.std.constant.ApplicationConstants;
import com.lk.std.constant.GeneralEnumConstants;
import com.lk.std.constant.OLSIMSEnumConstant;
import com.lk.std.constant.GeneralEnumConstants.UserRoleType;
import com.lk.std.constant.OLSIMSEnumConstant.Action;
import com.lk.std.model.Staff;
import com.lk.std.model.SystemUser;
import com.lk.std.model.UserRole;
import com.lk.std.service.ActionLoggerService;
import com.lk.std.service.BranchService;
import com.lk.std.service.DesignationService;
import com.lk.std.service.StaffService;
import com.lk.std.util.Session;

@Controller
@RequestMapping
public class StaffProfileController {

	@Autowired
	DesignationService designationService;

	@Autowired
	BranchService branchService;

	@Autowired
	StaffService staffService;

	@Autowired
	private ActionLoggerService actionloggerService;

	@RequestMapping(value = "/staffprofile", method = RequestMethod.GET)
	public ModelAndView getStaffPage(HttpServletRequest request) {
		ModelMap modelMap = new ModelMap();
		modelMap.addAttribute("branchs", branchService.findAll());
		for(int i=1; i<branchService.findAll().size();i++){			
			System.out.println(branchService.findAll().get(i).getCode());
		}
		modelMap.addAttribute("designations", designationService.findAll());
		modelMap.addAttribute("titles", OLSIMSEnumConstant.Title.values());
		modelMap.addAttribute("status", OLSIMSEnumConstant.ActiveStatus.values());

		long staffId = 0;
		Staff staff = null;
		try {
			if (!StringUtils.isBlank(request.getParameter("staffId"))) {
				staffId = Long.parseLong(request.getParameter("staffId").trim());
			}
			if (staffId > 0) {
				staff = staffService.findById(staffId);
			} else {
				staff = new Staff();
			}
		} catch (Exception e) { 
		}
		modelMap.addAttribute("staff", staff);
		return new ModelAndView("staffprofile", modelMap);
	}

	@RequestMapping(value = "/createStaff", method = RequestMethod.POST)
	public String StaffPager(HttpServletRequest request, @ModelAttribute("staff") Staff staff, BindingResult errors) {
		if (errors.hasErrors()) {
			System.out.println("------------error occured");
		}
		// Staff staff2=null;
		Action action = null;

		try {
			if (!StringUtils.isBlank(request.getParameter("staff_id"))) {
				// staff2=staffService.findById(staff.getId());
				action = Action.USER_UPDATED;
			} else {
				// staff2=new Staff();
				action = Action.USER_CREATED;
			}

		} catch (Exception e) {
			System.out.println("------------ Exception occured");
		}
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd");

		if (!StringUtils.isBlank(request.getParameter("jdate"))) {
			try {
				Date startDate;
				startDate = df.parse(request.getParameter("jdate"));
				String newDateString = df.format(startDate);
				System.out.println(newDateString);
				staff.setJdate(startDate); 
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		if (!StringUtils.isBlank(request.getParameter("ldate"))) {
			try {
				Date endDate;
				endDate = df.parse(request.getParameter("ldate"));
				String newDateString = df.format(endDate);
				System.out.println(newDateString); 
				staff.setLdate(endDate);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		Staff saveStaff = staffService.save(staff);
		
		SystemUser systemUserM = new SystemUser();
		systemUserM.setActiveStatus(GeneralEnumConstants.YesNoStatus.YES);
		systemUserM.setUserName(parent.getFemail());
		systemUserM.setPassword(parent.getFnic());
		systemUserM.setEmailAddress(parent.getFemail());

		List<UserRole> userRolesM = new ArrayList<UserRole>();
		UserRole userRoleM = new UserRole();
		userRoleM.setUserRoleType(UserRoleType.ROLE_USER);
		userRolesM.add(userRoleM);
		systemUserM.setUserRoles(userRolesM);

		systemUserService.saveSystemUser(systemUserM);

		if (saveStaff != null) {
			// set action logger
			actionloggerService.setActionLogger(action, "created by" + Session.getLoggedUserId(), saveStaff.getId(),
					Session.getLoggedUserId());
			return "redirect:staffprofile.htm?staffId=" + saveStaff.getId() + "&" + ApplicationConstants.MESSAGE + "="
					+ ApplicationConstants.SUCCESS;
		} else {
			return "redirect:staffprofiler.htm?" + ApplicationConstants.MESSAGE + "=" + ApplicationConstants.ERROR;
		}
	}

}
